--> 1
a: The built-in sort function directly sorts the list it is called on. The return value of it is none. No copies are made.
b: First a shallow copy is made. Than the referenced values are sorted, thus both lists are sorted as they are actually the same one.
c: The sorted function creates a shallow copy while sorting. It then returns the sorted copy.
--> 2
--> 3
What is the “time‐complexity” of this “binary” search function (comparisons are needed for n‐elements in the input list):
a : 1
b : log2 n
b : log2 n
--> 4
How many steps are needed for the list of 1000 names for cases:
Linear search in unsorted list:
on avg : (n-1)/2
worst case: n-1
Binary search in sorted list:
on avg : ~10
worst case: ~10
--> 5
5: The most memory efficient solution would be a list or an array, where the index represents the position in the sorted list and the value corresponds to the value in the sorted list.
5: To avoid searching a mapping dictionary is created on the unsorted list. The mapping dictionary has the names as keys and the original index as value.
5: The index is then build by retrieving the indices from the dictionary using the sorted names.
--> 6
6: n
--> 8
--> 9
9: A dictionary that stores the indexes in both lists would be a good alternative, because it could be very easily reversed by swapping the key and the value. The mapping dictionary i created could also be used
9: A dictionary is a hash table. The hash table consists of slots which are assigned in order of entry insertion (> Python 3.7). Each slot entry is a combination of hash, key and value, implemented as C struct. Lookup costs O(1)
